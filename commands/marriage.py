import discord
from discord import app_commands
from discord.ext import commands
from db.db import execute_query
import time
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

async def setup(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±—Ä–∞–∫–æ–≤"""
    logger.info("–î–æ–±–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—ã marriage...")
    marriage_group = app_commands.Group(name="marriage", description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∞–∫–∞–º–∏")

    @marriage_group.command(name="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±—Ä–∞–∫")
    async def marriage_info(interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –±—Ä–∞–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = interaction.user.id
        logger.debug(f"–ó–∞–ø—É—Å–∫ info –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
            test_conn = execute_query("SELECT 1", fetch_one=True)
            logger.debug(f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {test_conn}")
            marriage = execute_query(
                "SELECT partner_id, timestamp FROM marriages WHERE user_id = %s",
                (user_id,),
                fetch_one=True
            )
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {marriage}")
            if marriage is None:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ")
                await interaction.response.send_message("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!", ephemeral=True)
                return
            partner_id = marriage.get("partner_id")
            timestamp = marriage.get("timestamp")
            if not partner_id or not timestamp:
                logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}: partner_id={partner_id}, timestamp={timestamp}")
                await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–∞–∫–µ.", ephemeral=True)
                return
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id}")
            partner = await bot.fetch_user(partner_id)
            embed = discord.Embed(
                title="üíç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ",
                description=f"–í—ã –≤ –±—Ä–∞–∫–µ —Å {partner.mention} —Å {timestamp.strftime('%Y-%m-%d %H:%M:%S')}.",
                color=0xCCB4E4
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ info –¥–ª—è {user_id}: {e}", exc_info=True)
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", ephemeral=True)

    @marriage_group.command(name="list", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–∞–∫–∏")
    async def marriage_list(interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–∞–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = interaction.user.id
        logger.debug(f"–ó–∞–ø—É—Å–∫ list –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
            test_conn = execute_query("SELECT 1", fetch_one=True)
            logger.debug(f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {test_conn}")
            marriages = execute_query(
                "SELECT partner_id, timestamp FROM marriages WHERE user_id = %s",
                (user_id,),
                fetch_all=True
            )
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: {marriages}")
            if not marriages:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –±—Ä–∞–∫–æ–≤")
                await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–∞–∫–æ–≤!", ephemeral=True)
                return
            embed = discord.Embed(title="üíû –í–∞—à–∏ –±—Ä–∞–∫–∏", color=0xCCB4E4)
            for marriage in marriages:
                partner_id = marriage.get("partner_id")
                timestamp = marriage.get("timestamp")
                if not partner_id or not timestamp:
                    logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –±—Ä–∞–∫–µ –¥–ª—è {user_id}: partner_id={partner_id}, timestamp={timestamp}")
                    embed.add_field(
                        name="–û—à–∏–±–∫–∞",
                        value="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ä—Ç–Ω—ë—Ä–µ.",
                        inline=False
                    )
                    continue
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id}")
                try:
                    partner = await bot.fetch_user(partner_id)
                    embed.add_field(
                        name=f"–ü–∞—Ä—Ç–Ω—ë—Ä: {partner.name}",
                        value=f"–î–∞—Ç–∞: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}",
                        inline=False
                    )
                except discord.NotFound:
                    logger.error(f"–ü–∞—Ä—Ç–Ω—ë—Ä {partner_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {user_id}")
                    embed.add_field(
                        name="–û—à–∏–±–∫–∞",
                        value="–ü–∞—Ä—Ç–Ω—ë—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        inline=False
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ {partner_id}: {e}", exc_info=True)
                    embed.add_field(
                        name="–û—à–∏–±–∫–∞",
                        value="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.",
                        inline=False
                    )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ list –¥–ª—è {user_id}: {e}", exc_info=True)
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", ephemeral=True)

    @marriage_group.command(name="marry", description="–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    async def marriage_marry(interaction: discord.Interaction, user: discord.User):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞"""
        proposer_id = interaction.user.id
        target_id = user.id
        if proposer_id == target_id:
            await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫ —Å–µ–±–µ!", ephemeral=True)
            return
        marriages = execute_query(
            "SELECT partner_id FROM marriages WHERE user_id = %s",
            (proposer_id,),
            fetch_all=True
        )
        limit = execute_query(
            "SELECT marriage_limit FROM marriage_limits WHERE user_id = %s",
            (proposer_id,),
            fetch_one=True
        )
        limit = limit[0] if limit else 1
        if len(marriages) >= limit:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±—Ä–∞–∫–æ–≤!", ephemeral=True)
            return
        proposal = execute_query(
            "SELECT timestamp FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
            (proposer_id, target_id),
            fetch_one=True
        )
        if proposal:
            await interaction.response.send_message("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", ephemeral=True)
            return
        try:
            execute_query(
                "INSERT INTO marriage_proposals (proposer_id, target_id, timestamp) VALUES (%s, %s, %s)",
                (proposer_id, target_id, time.strftime("%Y-%m-%d %H:%M:%S"))
            )
            await interaction.response.send_message(
                f"üíç {interaction.user.mention} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –±—Ä–∞–∫ {user.mention}! –û—Ç–≤–µ—Ç—å—Ç–µ —Å –ø–æ–º–æ—â—å—é `/marriage accept` –∏–ª–∏ `/marriage decline`.",
                ephemeral=False
            )
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    @marriage_group.command(name="accept", description="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    async def marriage_accept(interaction: discord.Interaction, user: discord.User):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞"""
        target_id = interaction.user.id
        proposer_id = user.id
        proposal = execute_query(
            "SELECT timestamp FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
            (proposer_id, target_id),
            fetch_one=True
        )
        if not proposal:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", ephemeral=True)
            return
        try:
            execute_query(
                "INSERT INTO marriages (user_id, partner_id, timestamp) VALUES (%s, %s, %s), (%s, %s, %s)",
                (proposer_id, target_id, time.strftime("%Y-%m-%d %H:%M:%S"), target_id, proposer_id, time.strftime("%Y-%m-%d %H:%M:%S"))
            )
            execute_query(
                "DELETE FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
                (proposer_id, target_id)
            )
            await interaction.response.send_message(
                f"üéâ {interaction.user.mention} –∏ {user.mention} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!",
                ephemeral=False
            )
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    @marriage_group.command(name="decline", description="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    async def marriage_decline(interaction: discord.Interaction, user: discord.User):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞"""
        target_id = interaction.user.id
        proposer_id = user.id
        proposal = execute_query(
            "SELECT timestamp FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
            (proposer_id, target_id),
            fetch_one=True
        )
        if not proposal:
            await interaction.response.send_message("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", ephemeral=True)
            return
        try:
            execute_query(
                "DELETE FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
                (proposer_id, target_id)
            )
            await interaction.response.send_message(
                f"üíî {interaction.user.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {user.mention}.",
                ephemeral=False
            )
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    @marriage_group.command(name="divorce", description="–†–∞–∑–≤–µ—Å—Ç–∏—Å—å")
    async def marriage_divorce(interaction: discord.Interaction, user: discord.User):
        """–†–∞–∑–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = interaction.user.id
        partner_id = user.id
        marriage = execute_query(
            "SELECT timestamp FROM marriages WHERE user_id = %s AND partner_id = %s",
            (user_id, partner_id),
            fetch_one=True
        )
        if not marriage:
            await interaction.response.send_message("‚ùå –í—ã –Ω–µ –≤ –±—Ä–∞–∫–µ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!", ephemeral=True)
            return
        try:
            execute_query(
                "DELETE FROM marriages WHERE (user_id = %s AND partner_id = %s) OR (user_id = %s AND partner_id = %s)",
                (user_id, partner_id, partner_id, user_id)
            )
            await interaction.response.send_message(
                f"üíî {interaction.user.mention} –∏ {user.mention} —Ä–∞–∑–≤–µ–ª–∏—Å—å.",
                ephemeral=False
            )
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

    @marriage_group.command(name="proposals", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    async def marriage_proposals(interaction: discord.Interaction, page: int = 1):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º)"""
        user_id = interaction.user.id
        per_page = 5
        offset = (page - 1) * per_page
        proposals = execute_query(
            "SELECT proposer_id, timestamp FROM marriage_proposals WHERE target_id = %s LIMIT %s OFFSET %s",
            (user_id, per_page, offset),
            fetch_all=True
        )
        if not proposals:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!", ephemeral=True)
            return
        embed = discord.Embed(title="üíå –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", color=0xCCB4E4)
        for proposal in proposals:
            proposer_id = proposal.get("proposer_id")
            timestamp = proposal.get("timestamp")
            if not proposer_id or not timestamp:
                embed.add_field(
                    name="–û—à–∏–±–∫–∞",
                    value="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.",
                    inline=False
                )
                continue
            try:
                proposer = await bot.fetch_user(proposer_id)
                embed.add_field(
                    name=f"–û—Ç: {proposer.name}",
                    value=f"–î–∞—Ç–∞: {timestamp.strftime('%Y-%m-%d %H:%M:%S')}",
                    inline=False
                )
            except discord.NotFound:
                embed.add_field(
                    name="–û—à–∏–±–∫–∞",
                    value="–ü—Ä–µ–¥–ª–æ–∂–∏–≤—à–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    inline=False
                )
        total_proposals = execute_query(
            "SELECT COUNT(*) FROM marriage_proposals WHERE target_id = %s",
            (user_id,),
            fetch_one=True
        )[0]
        total_pages = (total_proposals + per_page - 1) // per_page
        embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}")
        await interaction.response.send_message(embed=embed, ephemeral=True)

    bot.tree.add_command(marriage_group)
    logger.info("–ö–æ–º–∞–Ω–¥—ã marriage —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
