import discord
from discord import app_commands
from discord.ext import commands
from db.db import execute_query
from datetime import datetime

class Marriage(commands.GroupCog, name="marriage"):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ")
    async def marriage_info(self, interaction: discord.Interaction):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ö–∞–Ω–∏–∫–µ –±—Ä–∞–∫–∞"""
        embed = discord.Embed(title="üíç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ", color=0xF47FFF)
        embed.description = (
            "–ë—Ä–∞–∫ ‚Äî —ç—Ç–æ —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –±—Ä–∞–∫, –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ä–∞–∑–≤–æ–¥–∏—Ç—å—Å—è –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤."
        )
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="list", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–∞–∫–æ–≤")
    async def marriage_list(self, interaction: discord.Interaction):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –±—Ä–∞–∫–æ–≤"""
        marriages = execute_query("SELECT partner_id, timestamp FROM marriages WHERE user_id = %s", 
                                  (interaction.user.id,), fetch_all=True)
        if not marriages:
            return await interaction.response.send_message("üíî –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–∞–∫–æ–≤.")

        embed = discord.Embed(title="üíç –í–∞—à–∏ –±—Ä–∞–∫–∏", color=0xF47FFF)
        for partner_id, timestamp in marriages:
            partner = interaction.guild.get_member(partner_id)
            name = partner.display_name if partner else f"Unknown ({partner_id})"
            dt = datetime.fromisoformat(timestamp)
            embed.add_field(name=name, value=f"–í –±—Ä–∞–∫–µ —Å <t:{int(dt.timestamp())}:R>", inline=False)
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="marry", description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫")
    async def marriage_marry(self, interaction: discord.Interaction, member: discord.Member):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ"""
        if member.id == interaction.user.id:
            return await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ.", ephemeral=True)

        limit_count = execute_query("SELECT limit_count FROM marriage_limits WHERE user_id = %s", 
                                    (interaction.user.id,), fetch_one=True)

        if limit_count is None:
            execute_query("INSERT INTO marriage_limits (user_id, limit_count) VALUES (%s, %s)", 
                          (interaction.user.id, 1))
            limit_count = (1,)

        current_marriages = execute_query("SELECT COUNT(*) FROM marriages WHERE user_id = %s", 
                                          (interaction.user.id,), fetch_one=True)[0]

        current_requests = execute_query("SELECT COUNT(*) FROM marriage_proposals WHERE proposer_id = %s",
                                         (interaction.user.id,), fetch_one=True)[0]

        if (current_marriages + current_requests) >= limit_count[0]:
            return await interaction.response.send_message("‚ùå –í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±—Ä–∞–∫–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤.", ephemeral=True)

        execute_query("INSERT INTO marriage_proposals (proposer_id, target_id, timestamp) VALUES (%s, %s, %s)",
                      (interaction.user.id, member.id, datetime.utcnow().isoformat()))

        embed = discord.Embed(title="üíç –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!", color=0xF47FFF)
        embed.add_field(name="–ö—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç", value=interaction.user.mention)
        embed.add_field(name="–ö–æ–º—É", value=member.mention)
        embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /marriage accept, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å.")
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="accept", description="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")
    async def marriage_accept(self, interaction: discord.Interaction, user: discord.User):
        """–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ"""
        proposal = execute_query("SELECT timestamp FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
                                 (user.id, interaction.user.id), fetch_one=True)
        if not proposal:
            return await interaction.response.send_message("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—Å.", ephemeral=True)

        execute_query("DELETE FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
                      (user.id, interaction.user.id))

        now = datetime.utcnow().isoformat()
        execute_query("INSERT INTO marriages (user_id, partner_id, timestamp) VALUES (%s, %s, %s)", 
                      (interaction.user.id, user.id, now))
        execute_query("INSERT INTO marriages (user_id, partner_id, timestamp) VALUES (%s, %s, %s)", 
                      (user.id, interaction.user.id, now))

        await interaction.response.send_message(f"üíç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å {user.mention}")

    @app_commands.command(name="decline", description="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")
    async def marriage_decline(self, interaction: discord.Interaction, user: discord.User):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ"""
        proposal = execute_query("SELECT 1 FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
                                 (user.id, interaction.user.id), fetch_one=True)
        if not proposal:
            return await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", ephemeral=True)

        execute_query("DELETE FROM marriage_proposals WHERE proposer_id = %s AND target_id = %s",
                      (user.id, interaction.user.id))
        await interaction.response.send_message("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

    @app_commands.command(name="divorce", description="–†–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    async def marriage_divorce(self, interaction: discord.Interaction, user: discord.User):
        """–û—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞–∑–≤–æ–¥"""
        marriage = execute_query("SELECT 1 FROM marriages WHERE user_id = %s AND partner_id = %s",
                                 (interaction.user.id, user.id), fetch_one=True)
        if not marriage:
            return await interaction.response.send_message("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.", ephemeral=True)

        execute_query("DELETE FROM marriages WHERE user_id = %s AND partner_id = %s", (interaction.user.id, user.id))
        execute_query("DELETE FROM marriages WHERE user_id = %s AND partner_id = %s", (user.id, interaction.user.id))

        embed = discord.Embed(title="üíî –†–∞–∑–≤–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω", description=f"–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ —Å {user.mention}.", color=0xFF0000)
        embed.set_footer(text="–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∂–∏–∑–Ω—å! üí°")
        await interaction.response.send_message(embed=embed)

async def setup(bot):
    await bot.add_cog(Marriage(bot))
