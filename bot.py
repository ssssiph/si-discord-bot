import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import os
from datetime import datetime
import sqlite3

DEFAULT_PREFIX = "s!"
SUPPORT_SERVER = "https://discord.gg/g24dUqCxjt"
DEFAULT_MARRIAGE_LIMIT = 1

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=self.get_prefix, intents=intents, help_command=None)
        self.db = sqlite3.connect("bot.db")
        self.cursor = self.db.cursor()
        self.create_tables()

    async def setup_hook(self):
        await self.tree.sync()

    def create_tables(self):
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS prefixes (
            guild_id INTEGER PRIMARY KEY,
            prefix TEXT
        )
        """)
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS marriages (
            user_id INTEGER,
            partner_id INTEGER,
            timestamp TEXT,
            PRIMARY KEY(user_id, partner_id)
        )
        """)
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS marriage_limits (
            user_id INTEGER PRIMARY KEY,
            marriage_limit INTEGER DEFAULT 1
        )
        """)
        self.cursor.execute("""
        CREATE TABLE IF NOT EXISTS marriage_proposals (
            proposer_id INTEGER,
            target_id INTEGER,
            timestamp TEXT,
            PRIMARY KEY(proposer_id, target_id)
        )
        """)
        self.db.commit()

    async def get_prefix(self, message):
        return DEFAULT_PREFIX

bot = MyBot()

@bot.tree.command(name="prefix", description="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥")
@app_commands.describe(new_prefix="–ù–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")
async def changeprefix(interaction: discord.Interaction, new_prefix: str):
    if not interaction.user.guild_permissions.administrator:
        return await interaction.response.send_message("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å.", ephemeral=True)
    await interaction.response.send_message(f"‚ùå –ü—Ä–µ—Ñ–∏–∫—Å –º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è, –æ–Ω –≤—Å–µ–≥–¥–∞ `{DEFAULT_PREFIX}`.", ephemeral=True)

HELP_COMMANDS = {
    "help": "–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    "prefix": "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥",
    "marriage info": "üíç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±—Ä–∞–∫",
    "marriage accept <user>": "üíç –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ",
    "marriage decline <user>": "üíç –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ",
    "marriage divorce <user>": "üíç –†–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å –∫–µ–º-—Ç–æ",
    "marriage list": "üíç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –±—Ä–∞–∫–∏",
    "marriage marry <member>": "üíç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ –∫–æ–º—É-—Ç–æ",
    "marriage proposals [page]": "üíç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—Ä–∞–∫–æ–≤"
}

async def send_help(ctx_or_interaction):
    prefix = DEFAULT_PREFIX
    embed = discord.Embed(title="ü§ñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º", color=0x5865F2)
    embed.add_field(name="–ü—Ä–µ—Ñ–∏–∫—Å", value=f"`{prefix}`", inline=False)
    embed.add_field(name="–°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏", value=SUPPORT_SERVER, inline=False)
    commands_text = "\n".join(f"`{prefix}{cmd}` - {desc}" for cmd, desc in HELP_COMMANDS.items())
    embed.add_field(name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", value=commands_text, inline=False)
    embed.set_footer(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üíô")

    if isinstance(ctx_or_interaction, commands.Context):
        await ctx_or_interaction.send(embed=embed)
    else:
        await ctx_or_interaction.response.send_message(embed=embed)

@bot.command(name="help")
async def helpcmd(ctx):
    await send_help(ctx)

@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
async def helpslash(interaction: discord.Interaction):
    await send_help(interaction)

marriage = app_commands.Group(name="marriage", description="–ö–æ–º–∞–Ω–¥—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±—Ä–∞–∫–æ–º")

@marriage.command(name="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ")
async def marriageinfo(interaction: discord.Interaction):
    description = (
        "üíç **–ß—Ç–æ —Ç–∞–∫–æ–µ –±—Ä–∞–∫?**\n"
        "–ë—Ä–∞–∫ ‚Äî —ç—Ç–æ —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –±—Ä–∞–∫, –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ä–∞–∑–≤–æ–¥–∏—Ç—å—Å—è –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤."
    )
    embed = discord.Embed(title="üíç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ", description=description, color=0xF47FFF)
    await interaction.response.send_message(embed=embed)

@marriage.command(name="list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±—Ä–∞–∫–æ–≤")
async def marriagelist(interaction: discord.Interaction):
    bot.cursor.execute("SELECT partner_id, timestamp FROM marriages WHERE user_id = ?", (interaction.user.id,))
    marriages = bot.cursor.fetchall()
    if not marriages:
        return await interaction.response.send_message("üíî –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–∞–∫–æ–≤.")
    embed = discord.Embed(title="üíç –í–∞—à–∏ –±—Ä–∞–∫–∏", color=0xF47FFF)
    for partner_id, timestamp in marriages:
        partner = interaction.guild.get_member(partner_id)
        name = partner.display_name if partner else f"Unknown ({partner_id})"
        dt = datetime.fromisoformat(timestamp)
        embed.add_field(name=name, value=f"–í –±—Ä–∞–∫–µ —Å <t:{int(dt.timestamp())}:R>", inline=False)
    await interaction.response.send_message(embed=embed)

@marriage.command(name="marry", description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫")
@app_commands.describe(member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def marriagemarry(interaction: discord.Interaction, member: discord.Member):
    if member.id == interaction.user.id:
        return await interaction.response.send_message("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ.", ephemeral=True)
    bot.cursor.execute("SELECT marriage_limit FROM marriage_limits WHERE user_id = ?", (interaction.user.id,))
    result = bot.cursor.fetchone()
    marriage_limit = result[0] if result else DEFAULT_MARRIAGE_LIMIT
    bot.cursor.execute("SELECT COUNT(*) FROM marriages WHERE user_id = ?", (interaction.user.id,))
    count = bot.cursor.fetchone()[0]
    if count >= marriage_limit:
        return await interaction.response.send_message(f"‚ùå –£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ ({marriage_limit}).", ephemeral=True)
    bot.cursor.execute("SELECT 1 FROM marriage_proposals WHERE proposer_id = ? AND target_id = ?", (interaction.user.id, member.id))
    if bot.cursor.fetchone():
        return await interaction.response.send_message("‚ùó –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", ephemeral=True)
    now = datetime.utcnow().isoformat()
    bot.cursor.execute("INSERT INTO marriage_proposals (proposer_id, target_id, timestamp) VALUES (?, ?, ?)",
                       (interaction.user.id, member.id, now))
    bot.db.commit()
    embed = discord.Embed(title="üíç –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞!", color=0xF47FFF)
    embed.add_field(name="–ö—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç", value=interaction.user.mention, inline=True)
    embed.add_field(name="–ö–æ–º—É", value=member.mention, inline=True)
    embed.set_footer(text="–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /marriage accept")
    await interaction.response.send_message(embed=embed)

@marriage.command(name="accept", description="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ")
async def marriageaccept(interaction: discord.Interaction, user: discord.User):
    bot.cursor.execute("SELECT timestamp FROM marriage_proposals WHERE proposer_id = ? AND target_id = ?",
                       (user.id, interaction.user.id))
    result = bot.cursor.fetchone()
    if not result:
        return await interaction.response.send_message("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—Å.", ephemeral=True)
    bot.cursor.execute("SELECT marriage_limit FROM marriage_limits WHERE user_id = ?", (interaction.user.id,))
    target_limit = bot.cursor.fetchone()
    target_limit = target_limit[0] if target_limit else DEFAULT_MARRIAGE_LIMIT
    bot.cursor.execute("SELECT COUNT(*) FROM marriages WHERE user_id = ?", (interaction.user.id,))
    if bot.cursor.fetchone()[0] >= target_limit:
        return await interaction.response.send_message("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±—Ä–∞–∫–æ–≤.", ephemeral=True)
    bot.cursor.execute("SELECT marriage_limit FROM marriage_limits WHERE user_id = ?", (user.id,))
    proposer_limit = bot.cursor.fetchone()
    proposer_limit = proposer_limit[0] if proposer_limit else DEFAULT_MARRIAGE_LIMIT
    bot.cursor.execute("SELECT COUNT(*) FROM marriages WHERE user_id = ?", (user.id,))
    if bot.cursor.fetchone()[0] >= proposer_limit:
        return await interaction.response.send_message("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –±—Ä–∞–∫–æ–≤.", ephemeral=True)
    now = datetime.utcnow().isoformat()
    bot.cursor.execute("INSERT OR IGNORE INTO marriages (user_id, partner_id, timestamp) VALUES (?, ?, ?)", (interaction.user.id, user.id, now))
    bot.cursor.execute("INSERT OR IGNORE INTO marriages (user_id, partner_id, timestamp) VALUES (?, ?, ?)", (user.id, interaction.user.id, now))
    bot.cursor.execute("DELETE FROM marriage_proposals WHERE proposer_id = ? AND target_id = ?", (user.id, interaction.user.id))
    bot.db.commit()
    await interaction.response.send_message(f"üíç –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å {user.mention}")

@marriage.command(name="decline", description="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á—å—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—ã –æ—Ç–∫–ª–æ–Ω—è–µ—Ç–µ")
async def marriagedecline(interaction: discord.Interaction, user: discord.User):
    bot.cursor.execute("DELETE FROM marriage_proposals WHERE proposer_id = ? AND target_id = ?", (user.id, interaction.user.id))
    bot.db.commit()
    await interaction.response.send_message("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")

@marriage.command(name="divorce", description="–†–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
@app_commands.describe(user="–ü–∞—Ä—Ç–Ω—ë—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å")
async def marriagedivorce(interaction: discord.Interaction, user: discord.User):
    bot.cursor.execute("DELETE FROM marriages WHERE user_id = ? AND partner_id = ?", (interaction.user.id, user.id))
    bot.cursor.execute("DELETE FROM marriages WHERE user_id = ? AND partner_id = ?", (user.id, interaction.user.id))
    bot.db.commit()
    await interaction.response.send_message(f"üíî –í—ã —Ä–∞–∑–≤–µ–ª–∏—Å—å —Å {user.mention}.")

@marriage.command(name="proposals", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –±—Ä–∞–∫–µ")
@app_commands.describe(page="–°—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)")
async def marriageproposals(interaction: discord.Interaction, page: int = 1):
    bot.cursor.execute("SELECT proposer_id, timestamp FROM marriage_proposals WHERE target_id = ?", (interaction.user.id,))
    proposals = bot.cursor.fetchall()
    if not proposals:
        return await interaction.response.send_message("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ –±—Ä–∞–∫–µ.")
    per_page = 10
    start = (page - 1) * per_page
    end = start + per_page
    embed = discord.Embed(title="üíå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –±—Ä–∞–∫–µ", color=0xF47FFF)
    for proposer_id, timestamp in proposals[start:end]:
        proposer = interaction.guild.get_member(proposer_id)
        name = proposer.display_name if proposer else f"Unknown ({proposer_id})"
        dt = datetime.fromisoformat(timestamp)
        embed.add_field(name=name, value=f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ <t:{int(dt.timestamp())}:R>", inline=False)
    embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{(len(proposals) - 1) // per_page + 1}")
    await interaction.response.send_message(embed=embed)

bot.tree.add_command(marriage)

bot.run(os.getenv("DISCORD_TOKEN"))
