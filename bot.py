import discord
from discord.ext import commands
from discord import app_commands
import os
import mysql.connector
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
DB_URL = os.getenv("DATABASE_URL")

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True

bot = commands.Bot(command_prefix="s!", intents=intents, help_command=None)
tree = bot.tree

# =================== DATABASE ===================
import re
import urllib.parse as up

parsed = re.match(r"mysql:\/\/(?P<user>.*?):(?P<password>.*?)@(?P<host>.*?):(?P<port>\d+)\/(?P<db>.+)", DB_URL)
conn = mysql.connector.connect(
    user=parsed.group("user"),
    password=parsed.group("password"),
    host=parsed.group("host"),
    port=parsed.group("port"),
    database=parsed.group("db"),
)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS prefixes (
    guild_id BIGINT PRIMARY KEY,
    prefix VARCHAR(10) DEFAULT 's!'
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS marriages (
    user_id BIGINT,
    partner_id BIGINT,
    PRIMARY KEY (user_id, partner_id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS marriage_limits (
    user_id BIGINT PRIMARY KEY,
    limit_count INT DEFAULT 10
)
""")
conn.commit()

# ========== PREFIX GETTER ==========
async def get_prefix(bot, message):
    if not message.guild:
        return "s!"
    cursor.execute("SELECT prefix FROM prefixes WHERE guild_id = %s", (message.guild.id,))
    result = cursor.fetchone()
    return result[0] if result else "s!"

bot.command_prefix = get_prefix

# =================== EVENTS ===================
@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}')
    try:
        synced = await tree.sync()
        print(f'Synced {len(synced)} command(s)')
    except Exception as e:
        print(e)

# =================== PREFIX COMMANDS ===================
@bot.command(name='prefix')
@commands.has_permissions(administrator=True)
async def change_prefix(ctx, new_prefix: str):
    cursor.execute("REPLACE INTO prefixes (guild_id, prefix) VALUES (%s, %s)", (ctx.guild.id, new_prefix))
    conn.commit()
    await ctx.send(f"–ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ `{new_prefix}`")

@tree.command(name="prefix", description="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥")
@app_commands.describe(prefix="–ù–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")
@app_commands.checks.has_permissions(administrator=True)
async def slash_prefix(interaction: discord.Interaction, prefix: str):
    cursor.execute("REPLACE INTO prefixes (guild_id, prefix) VALUES (%s, %s)", (interaction.guild.id, prefix))
    conn.commit()
    await interaction.response.send_message(f"–ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ `{prefix}`")

# =================== HELP ===================
@bot.command(name="help")
async def help_cmd(ctx):
    prefix = await get_prefix(bot, ctx.message)
    help_text = f"""üìñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**
–ü—Ä–µ—Ñ–∏–∫—Å: `{prefix}`
–°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏: https://discord.gg/g24dUqCxjt

**–ö–æ–º–∞–Ω–¥—ã:**
{prefix}help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
{prefix}prefix <–ø—Ä–µ—Ñ–∏–∫—Å> - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
{prefix}ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞
{prefix}marriage marry <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> - –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫
{prefix}marriage accept <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> - –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
{prefix}marriage decline <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å
{prefix}marriage divorce <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> - –†–∞–∑–≤–æ–¥
{prefix}marriage info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–∞—Ö
{prefix}marriage list - –ú–æ–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã
{prefix}marriage proposals - –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
"""
    await ctx.send(help_text)

@tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É")
async def slash_help(interaction: discord.Interaction):
    prefix = await get_prefix(bot, interaction)
    await interaction.response.send_message(f"""üìñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**
–ü—Ä–µ—Ñ–∏–∫—Å: `{prefix}`
–°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏: https://discord.gg/g24dUqCxjt

**–°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã:** `/ping`, `/prefix`, `/help`, `/marriage ...`
**–ü—Ä–µ—Ñ–∏–∫—Å-–∫–æ–º–∞–Ω–¥—ã:** `s!ping`, `s!prefix`, `s!marriage ...`
""")

# =================== PING ===================
@bot.command(name='ping')
async def ping(ctx):
    await ctx.send(f'–ü–∏–Ω–≥: {round(bot.latency * 1000)}–º—Å')

@tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥ –±–æ—Ç–∞")
async def slash_ping(interaction: discord.Interaction):
    await interaction.response.send_message(f'–ü–∏–Ω–≥: {round(bot.latency * 1000)}–º—Å')

# =================== MARRIAGE ===================
marriage = app_commands.Group(name="marriage", description="–ë—Ä–∞—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
tree.add_command(marriage)

@bot.group(name="marriage")
async def marriage_group(ctx):
    if ctx.invoked_subcommand is None:
        await ctx.send("–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã: info, marry, accept, decline, divorce, list, proposals")

# marry
@marriage.command(name="marry", description="üíç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ –∫–æ–º—É-—Ç–æ")
@app_commands.describe(member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def marry(interaction: discord.Interaction, member: discord.Member):
    if member.id == interaction.user.id:
        return await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ", ephemeral=True)

    cursor.execute("SELECT COUNT(*) FROM marriages WHERE user_id = %s", (interaction.user.id,))
    current = cursor.fetchone()[0]

    cursor.execute("SELECT limit_count FROM marriage_limits WHERE user_id = %s", (interaction.user.id,))
    limit = cursor.fetchone()
    max_partners = limit[0] if limit else 10

    if current >= max_partners:
        return await interaction.response.send_message(f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±—Ä–∞–∫–æ–≤ ({max_partners})", ephemeral=True)

    cursor.execute("INSERT IGNORE INTO marriages (user_id, partner_id) VALUES (%s, %s)", (interaction.user.id, member.id))
    conn.commit()
    await interaction.response.send_message(f"{interaction.user.mention} –ø—Ä–µ–¥–ª–æ–∂–∏–ª –±—Ä–∞–∫ {member.mention} üíç")

@marriage_group.command(name="marry")
async def marry_cmd(ctx, member: discord.Member):
    await marry.callback(ctx, member)

# accept
@marriage.command(name="accept", description="üíç –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def accept(interaction: discord.Interaction, user: discord.User):
    cursor.execute("SELECT * FROM marriages WHERE user_id = %s AND partner_id = %s", (user.id, interaction.user.id))
    if cursor.fetchone():
        cursor.execute("INSERT IGNORE INTO marriages (user_id, partner_id) VALUES (%s, %s)", (interaction.user.id, user.id))
        conn.commit()
        await interaction.response.send_message(f"{interaction.user.mention} –ø—Ä–∏–Ω—è–ª –±—Ä–∞–∫ —Å {user.mention}")
    else:
        await interaction.response.send_message("–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ephemeral=True)

@marriage_group.command(name="accept")
async def accept_cmd(ctx, user: discord.User):
    await accept.callback(ctx, user)

# decline
@marriage.command(name="decline", description="üíç –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def decline(interaction: discord.Interaction, user: discord.User):
    cursor.execute("DELETE FROM marriages WHERE user_id = %s AND partner_id = %s", (user.id, interaction.user.id))
    conn.commit()
    await interaction.response.send_message(f"{interaction.user.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {user.mention}")

@marriage_group.command(name="decline")
async def decline_cmd(ctx, user: discord.User):
    await decline.callback(ctx, user)

# divorce
@marriage.command(name="divorce", description="üíç –†–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å –∫–µ–º-—Ç–æ")
@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
async def divorce(interaction: discord.Interaction, user: discord.User):
    cursor.execute("DELETE FROM marriages WHERE (user_id = %s AND partner_id = %s) OR (user_id = %s AND partner_id = %s)", (interaction.user.id, user.id, user.id, interaction.user.id))
    conn.commit()
    await interaction.response.send_message(f"{interaction.user.mention} —Ä–∞–∑–≤—ë–ª—Å—è —Å {user.mention}")

@marriage_group.command(name="divorce")
async def divorce_cmd(ctx, user: discord.User):
    await divorce.callback(ctx, user)

# list
@marriage.command(name="list", description="üíç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –±—Ä–∞–∫–∏")
async def list_marriages(interaction: discord.Interaction):
    cursor.execute("SELECT partner_id FROM marriages WHERE user_id = %s", (interaction.user.id,))
    partners = cursor.fetchall()
    if not partners:
        await interaction.response.send_message("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.")
        return
    mentions = [f"<@{p[0]}>" for p in partners]
    await interaction.response.send_message("–í–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã: " + ", ".join(mentions))

@marriage_group.command(name="list")
async def list_cmd(ctx):
    await list_marriages.callback(ctx)

# proposals
@marriage.command(name="proposals", description="üíç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
@app_commands.describe(page="–°—Ç—Ä–∞–Ω–∏—Ü–∞")
async def proposals(interaction: discord.Interaction, page: int = 1):
    cursor.execute("SELECT user_id FROM marriages WHERE partner_id = %s", (interaction.user.id,))
    proposals = cursor.fetchall()
    if not proposals:
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return
    mentions = [f"<@{p[0]}>" for p in proposals]
    await interaction.response.send_message("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: " + ", ".join(mentions))

@marriage_group.command(name="proposals")
async def proposals_cmd(ctx, page: int = 1):
    await proposals.callback(ctx, page)

# =================== RUN ===================
bot.run(TOKEN)
